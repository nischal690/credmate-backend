generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String    @id @default(uuid())
  email              String?   @unique
  password           String?
  name               String?
  businessType       String?
  date_of_birth      DateTime?
  phoneNumber        String    @unique
  aadhaarNumber      String?   @unique
  panNumber          String?   @unique
  profileImageUrl    String?
  plan               UserPlan  @default(FREE)
  referralCode       String    @unique @default(dbgenerated("\"substring\"(upper(replace(((gen_random_uuid())::character varying)::text, '-'::text, ''::text)), 1, 6)"))
  planPrice          Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  metadata           Json?
  status             String    @default("ACTIVE")
  credmateScore      Int       @default(0)
  creditScore        Int       @default(0)
  joinedReferralCode String?
  kyc                Boolean   @default(false)
  aadharcard         String?

  @@map("users")
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  metadata  Json?

  @@index([userId])
  @@map("notifications")
}

model SavedProfile {
  id               String    @id @default(uuid())
  savedByUserId    String
  savedUserId      String
  name             String?
  mobileNumber     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  isActive         Boolean   @default(true)
  transactionCount Int       @default(0)
  metadata         Json?

  @@unique([savedByUserId, savedUserId])
  @@index([savedByUserId])
  @@index([savedUserId])
  @@map("saved_profiles")
}

model Referral {
  id               String         @id @default(uuid())
  referrerUserId   String
  referredUserId   String
  referralCode     String         @unique
  status           ReferralStatus @default(PENDING)
  rewardIssued     Boolean        @default(false)
  rewardPercentage Float          @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  metadata         Json?

  @@index([referrerUserId])
  @@index([referredUserId])
  @@map("referrals")
}

model Announcement {
  id        String    @id @default(uuid())
  title     String
  message   String
  type      String
  isActive  Boolean   @default(true)
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  metadata  Json?

  @@map("announcements")
}

model CreditRequest {
  id                String              @id @default(uuid())
  parentRequestId   String?
  requestByUserId   String
  requestedToUserId String
  loanAmount        Float
  loanTerm          Int
  timeUnit          String
  interestRate      Float
  paymentType       String
  emiFrequency      String
  status            CreditRequestStatus @default(PROPOSED)
  versionNumber     Int                 @default(1)
  isLatest          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  metadata          Json?
  offerId           String?             // Added field for associated credit offer

  @@index([parentRequestId])
  @@index([requestByUserId])
  @@index([requestedToUserId])
  @@index([offerId])
  @@map("credit_requests")
}

model CreditOffer {
  id            String            @id @default(uuid())
  parentOfferId String?
  offerByUserId String
  offerToUserId String
  loanAmount    Float
  loanTerm      Int
  timeUnit      String
  interestRate  Float
  paymentType   String
  emiFrequency  String?
  status        CreditOfferStatus @default(PROPOSED)
  versionNumber Int               @default(1)
  isLatest      Boolean           @default(true)
  expiryDate    DateTime?
  plan          String?           @default("BASIC")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  metadata      Json?

  @@index([parentOfferId])
  @@index([offerByUserId])
  @@index([offerToUserId])
  @@map("credit_offers")
}

model Credit {
  id                String       @id @default(uuid())
  creditType        CreditType   @default(PERSONAL)
  requestId         String
  requestByUserId   String
  requestedToUserId String
  loanAmount        Float
  loanTerm          Int
  timeUnit          String
  interestRate      Float
  paymentType       String
  emiFrequency      String
  status            CreditStatus @default(ACTIVE)
  offeredId         String?
  recoveryMode      Boolean      @default(false)
  createdAt         DateTime     @default(now())
  finalizedAt       DateTime?
  offeredByUserId   String
  offeredToUserId   String
  metadata          Json?
  dueDate           Json?        // Stores due date status for bullet payment or EMI dates with their statuses

  @@index([requestId])
  @@index([requestByUserId])
  @@index([requestedToUserId])
  @@index([offeredByUserId])
  @@index([offeredToUserId])
  @@map("credits")
}

model ReportedBorrower {
  id                     String   @id @default(uuid())
  reportedByUserId       String
  mobileNumber           String
  unpaidAmount           Float
  dueDate                DateTime
  confirmedByBorrower    Boolean  @default(false)
  borrowerCreatedAccount Boolean  @default(false)
  createdAt              DateTime @default(now())
  recoveryMode           Boolean  @default(false)
  metadata               Json?

  @@index([reportedByUserId])
  @@map("reported_borrowers")
}

model Transaction {
  id            String   @id @default(uuid())
  uid           String
  amount        Float
  confirmed     Boolean  @default(false)
  confirmedData Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json?

  @@index([uid])
  @@map("transactions")
}

model Payment {
  id            String     @id @default(uuid())
  uid           String
  amount        Float
  requestRaised Boolean    @default(false)
  paid          Boolean    @default(false)
  createdAt     DateTime   @default(now())
  createdTime   String
  metadata      Json?
  paymentFor    PaymentFor @default(CONTRACT)
  updatedAt     DateTime   @default(now()) @updatedAt

  @@index([uid])
  @@map("payments")
}

model AllLenderRequest {
  id           String   @id @default(uuid())
  uid          String
  loanAmount   Float
  loanTerms    Int
  timeUnit     String
  interestRate Float
  purpose      String
  paymentType  String
  emiFrequency String?
  emiAmount    Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       String   @default("PENDING")
  metadata     Json?

  @@index([uid])
  @@map("alllenderrequests")
}

enum UserPlan {
  FREE
  PRO_INDIVIDUAL
  PRO_BUSINESS
  PRIORITY_BUSINESS
}

enum ReferralStatus {
  PENDING
  COMPLETED
  FAILED
}

enum CreditRequestStatus {
  PROPOSED
  ACCEPTED
  REJECTED
  NEGOTIATED
}

enum CreditOfferStatus {
  PROPOSED
  ACCEPTED
  REJECTED
  EXPIRED
  NEGOTIATED
}

enum CreditType {
  PERSONAL
  BUSINESS
  EDUCATION
  OTHER
}

enum CreditStatus {
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

enum PaymentFor {
  SUBSCRIPTION
  CONTRACT
}
