// This file is using the Prisma schema language.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ======= User Service =======
enum UserPlan {
  FREE
  PRO_INDIVIDUAL
  PRO_BUSINESS
  PRIORITY_BUSINESS
}

model User {
  id              String    @id @default(uuid())
  email           String?   @unique
  password        String?
  name            String?
  businessType    String?
  date_of_birth   DateTime?
  phoneNumber     String    @unique
  aadhaarNumber   String?   @unique
  panNumber       String?   @unique
  profileImageUrl String?
  plan            UserPlan  @default(FREE)
  referralCode    String    @unique @default(uuid()) // Automatically generated referral code
  planPrice       Float?    // New field for storing plan price
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  metadata        Json?     // For extensible user properties
  status          String    @default("ACTIVE") // ACTIVE, SUSPENDED, DELETED
  credmateScore   Int       @default(0)  // New field for Credmate score
  creditScore     Int       @default(0)  // New field for credit score

  @@map("users")
}

// ======= Notification Service =======
model Notification {
  id         String    @id @default(uuid())
  userId     String    // No direct relation, just store the ID
  type       String
  title      String
  message    String
  data       Json?
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime?
  metadata   Json?     // For additional notification data

  @@index([userId])
  @@map("notifications")
}

// ======= Profile Service =======
model SavedProfile {
  id            String    @id @default(uuid())
  savedByUserId String    // User who saved the profile
  savedUserId   String    // User who was saved
  name          String?   // Cached name of saved user
  mobileNumber  String?   // Cached mobile of saved user
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? 
  isActive      Boolean   @default(true)
  transactionCount Int    @default(0)
  metadata      Json?     // For additional profile data

  @@unique([savedByUserId, savedUserId])
  @@index([savedByUserId])
  @@index([savedUserId])
  @@map("saved_profiles")
}

// ======= Referral Service =======
enum ReferralStatus {
  PENDING
  COMPLETED
  FAILED
}

model Referral {
  id              String         @id @default(uuid())
  referrerUserId  String        // No direct relation
  referredUserId  String        // No direct relation
  referralCode    String        @unique
  status          ReferralStatus @default(PENDING)
  rewardIssued    Boolean       @default(false)
  rewardPercentage Float        @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  metadata        Json?         // For additional referral data

  @@index([referrerUserId])
  @@index([referredUserId])
  @@map("referrals")
}

// ======= Announcement Service =======
model Announcement {
  id          String    @id @default(uuid())
  title       String
  message     String
  type        String    // Type of announcement
  isActive    Boolean   @default(true)
  startDate   DateTime  @default(now())
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  metadata    Json?     // For additional announcement data

  @@map("announcements")
}

// ======= Credit Service =======
enum CreditRequestStatus {
  PROPOSED
  ACCEPTED
  REJECTED
  NEGOTIATED
}

model CreditRequest {
  id                String              @id @default(uuid())
  parentRequestId   String?            // For tracking negotiation history
  requestByUserId   String             // No direct relation
  requestedToUserId String             // No direct relation
  loanAmount        Float
  loanTerm          Int
  timeUnit          String             // DAYS, MONTHS, YEARS
  interestRate      Float
  paymentType       String             // EMI, BULLET
  emiFrequency      String             // DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY
  status            CreditRequestStatus @default(PROPOSED)
  versionNumber     Int                @default(1)
  isLatest         Boolean            @default(true)
  createdAt         DateTime           @default(now())
  metadata          Json?              // For additional request data

  @@index([parentRequestId])
  @@index([requestByUserId])
  @@index([requestedToUserId])
  @@map("credit_requests")
}

enum CreditOfferStatus {
  PROPOSED
  ACCEPTED
  REJECTED
  EXPIRED
  NEGOTIATED
}

model CreditOffer {
  id                String            @id @default(uuid())
  parentOfferId    String?           // For tracking negotiation history
  offerByUserId    String            // User who created the offer
  offerToUserId    String            // User to whom offer is made
  loanAmount       Float
  loanTerm         Int
  timeUnit         String            // DAYS, MONTHS, YEARS
  interestRate     Float
  paymentType      String            // EMI, BULLET
  emiFrequency     String            // DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY
  status           CreditOfferStatus @default(PROPOSED)
  versionNumber    Int               @default(1)
  isLatest        Boolean           @default(true)
  expiryDate      DateTime?         // When this offer expires
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  metadata         Json?            // For additional offer data
  
  @@index([parentOfferId])
  @@index([offerByUserId])
  @@index([offerToUserId])
  @@map("credit_offers")
}

enum CreditType {
  PERSONAL
  BUSINESS
  EDUCATION
  OTHER
}

enum CreditStatus {
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

model Credit {
  id                String        @id @default(uuid())
  creditType        CreditType    @default(PERSONAL)
  requestId         String        // Reference to the original credit request
  requestByUserId   String        // No direct relation
  requestedToUserId String        // No direct relation
  loanAmount        Float
  loanTerm          Int
  timeUnit          String        // DAYS, MONTHS, YEARS
  interestRate      Float
  paymentType       String        // EMI, BULLET
  emiFrequency      String        // DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY
  status            CreditStatus  @default(ACTIVE)
  offeredId         String?       // ID of the offer that was accepted
  recoveryMode      Boolean       @default(false)
  createdAt         DateTime      @default(now())
  finalizedAt       DateTime?
  offeredByUserId   String        // No direct relation
  offeredToUserId   String        // No direct relation
  metadata          Json?         // For additional credit data

  @@index([requestId])
  @@index([requestByUserId])
  @@index([requestedToUserId])
  @@index([offeredByUserId])
  @@index([offeredToUserId])
  @@map("credits")
}

// ======= Risk Service =======
model ReportedBorrower {
  id                      String    @id @default(uuid())
  reportedByUserId       String    // No direct relation
  mobileNumber           String
  unpaidAmount           Float
  dueDate                DateTime
  confirmedByBorrower    Boolean   @default(false)
  borrowerCreatedAccount Boolean   @default(false)
  createdAt              DateTime  @default(now())
  recoveryMode           Boolean   @default(false)
  metadata               Json?     // For additional report data

  @@index([reportedByUserId])
  @@map("reported_borrowers")
}

// ======= Transaction Service =======
model Transaction {
  id            String    @id @default(uuid())
  uid           String    // User ID associated with the transaction
  amount        Float     // Transaction amount
  confirmed     Boolean   @default(false)
  confirmedData Json?     // Data related to transaction confirmation
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  metadata      Json?     // For extensible transaction properties

  @@map("transactions")
  @@index([uid])
}

// ======= Payment Service =======
model Payment {
  id              String    @id @default(uuid())
  uid             String    // User ID who made the payment
  amount          Float
  requestRaised   Boolean   @default(false)
  paid            Boolean   @default(false)
  createdDate     DateTime  @default(now())
  createdTime     String    // Store time as string for better formatting
  metadata        Json?     // For additional payment data

  @@index([uid])
  @@map("payments")
}
